generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedback {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  feedbackType FeedbackType
  message      String
  email        String
  name         String
}

model views {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)
}

model reactions {
  slug  String @id @db.VarChar(128)
  like_count BigInt
  love_count BigInt
  clap_count BigInt
  party_count BigInt
}


model Contact {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  email     String
  avatar    String @default("")
}

model Post {
  id        Int     @id @default(autoincrement())
  content   String?
  published Boolean @default(false)
  authorId  Int?
  author    User?   @relation(fields: [authorId], references: [id])
}

model Todo {
  id        Int     @id @default(autoincrement())
  task      String?
  authorId  Int?
  author    User?   @relation(fields: [authorId], references: [id])
}

model HighScore {
  id        Int     @id @default(autoincrement())
  score     Int?
  playerId  Int?
  player    User?   @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now())
}

model Account {
  id                Int     @id @default(autoincrement())
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String?
  sessionState      String? @map("session_state")
  oauthTokenSecret  String? @map("oauth_token_secret")
  oauthToken        String? @map("oauth_token")
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  todos         Todo[]
  sessions      Session[]
  highScore     HighScore[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum FeedbackType {
  ISSUE
  IDEA
  FEEDBACK
}
model Guestbook {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(256)
  body      String
  createdBy String   @db.VarChar(256)
  createdAt DateTime @default(now())
}
